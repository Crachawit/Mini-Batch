import numpy as np

def cost_function(theta, x, y, N):
    y_hat = x.dot(theta)
    c = (1/N) * np.sum((y_hat - y) ** 2)
    return c

def gradient_descent_mini_batch(alpha, x, y, batch_size=2, ep=0.001, max_iter=10000):
    converged = False
    iter = 0
    N = x.shape[0]  # number of samples
    print("Num of data = ", N)

    # Initial theta
    theta = np.random.random((x.shape[1], 1))
    print("Init theta.shape = ", theta.shape)

    # Total error, J(theta)
    J = cost_function(theta, x, y, N)
    print("First J = ", J)

    # Iterate Loop
    while not converged:
        # Shuffle data
        indices = np.arange(N)
        np.random.shuffle(indices)
        x_shuffled = x[indices]
        y_shuffled = y[indices]

        for start in range(0, N, batch_size):
            end = min(start + batch_size, N)
            x_batch = x_shuffled[start:end]
            y_batch = y_shuffled[start:end]

            y_hat = x_batch.dot(theta)
            diff = y_hat - y_batch
            grad = x_batch.T.dot(diff)

            theta = theta - alpha * (1 / len(x_batch)) * grad

        assert theta.shape == (x.shape[1], 1)  # Ensure theta shape remains correct

        # Error
        J2 = cost_function(theta, x, y, N)

        if abs(J - J2) <= ep:
            print("       Converged, iterations: ", iter, "/", max_iter)
            converged = True

        J = J2  # Update error
        iter += 1  # Update iteration

        if iter == max_iter:
            print('       Max iterations exceeded!')
            converged = True

    #print("End converged iter = ", iter)
    return theta

if __name__ == '__main__':
    # Sample data; replace these with your actual data
    x_b = np.array([[1, 1], [1, 2], [1, 3], [1, 4]])
    y = np.array([1, 2, 3, 4])

    print("start main")
    print(x_b.shape)
    y = y.reshape(-1, 1)
    print(y.shape)

    alpha = 0.01  # learning rate
    # Training process
    theta = gradient_descent_mini_batch(alpha, x_b, y, batch_size=2, ep=0.000000000001, max_iter=1000000)
    print("Theta = ", theta)

    # Predict trained x
    xtest = np.array([[4, 9]])
    xtest_b = np.c_[np.ones((xtest.shape[0], 1)), xtest]
    y_p = xtest_b.dot(theta)
    print("y predict = ", y_p)
